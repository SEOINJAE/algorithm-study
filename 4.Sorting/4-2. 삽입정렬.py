"""
삽입 정렬(Insertion Sort) : '데이터를 하나씩 확인하며, 각 데이털르 적절한 위치에 삽입하면 어떨까?'
선택 정렬은 알고리즘 문제 풀이에 사용하기에 느린편이다.
삽입 정렬은 선택 정렬에 비해 실행 시간 측면에서 더 효율적인 알고리즘이다.

삽입 정렬은 특정한 데이터를 적절한 위치에 '삽입'한다는 의미에서 삽입 정렬이라고 부른다.
삽입 정렬은 특정한 데이터가 적절한 위치에 들어가기 이전에, 그 앞까지의 데이터는 이미 정렬되어 있다고 가정
정렬되어 있는 데이터 리스트에서 적절한 위치를 찾은 뒤에, 그 위치에 삽입된다는 점이 특징

* 삽입 정렬은 두 번째 데이터부터 시작한다. 첫 번째 데이터는 그 자체로 정렬되어 있다고 판단.
* 위치 삽입하는 과정을 N-1번 반복하게 되면 모든 데이터가 정렬된다.
"""

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소하며 반복하는 문법
        if array[j] < array[j - 1]: # 한 칸씩 왼쪽으로 이동
            array[j], array[j - 1] = array[j - 1], array[j]
        else: # 자기보다 작은 데이터를 만나면 그 위치에서 멈춤
            break

print(array)

"""
range의 매개 변수는 3개(start, end, step)이다. 세 번째 매개 변수인 step에 -1이 들어가면
start 인덱스부터 시작해서 end + 1 인덱스까지 1씩 감소한다.
앞의 코드에서는 j변수가 i부터 1까지 1씩 감소한다.

삽입 정렬의 시간 복잡도 O(N2) N * N이다.
데이터가 거의 정렬되어 있는 상태로 입력이 주어진다면, 여타 알고리즘과 비교해 빠른 성능을 보여줄 수 있다.
"""