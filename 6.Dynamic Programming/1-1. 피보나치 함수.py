"""
다이나믹 프로그래밍(Dynamic Programming)

피보나치 수열 함수 소스코드
재귀함수로 구현했을 경우 n의 크기가 커졌을때
시간 복잡도가 기하 급수적으로 늘어나서 처리가 불가능하다.

때문에 이 문제를 해결하기 위해 다이나믹 프로그래밍을 사용해서 해결할 수 있다.
다이나믹 프로그래밍은 다음 조건을 만족할 때 사용할 수 있다.
1. 큰 문제를 작은 문제로 나눌 수 있다.
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

피보나치 수열은 이러한 조건을 만족하는 대표 문제이다.
이 문제를 메모이제이션(Memoization) 기법을 사용해 해결
-> 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
메모이제이션은 값을 저장하는 방법으로 캐싱 (Caching)이라고도 한다.

"""

# 피보나치 함수(Fibonacci Function)를 재귀 함수로 구현
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(4))


# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건(1 혹은 2일 때 1을 반환)
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

print(fibo(99))


"""
재귀 함수를 사용하면 컴퓨터 시스템에서 함수를 다시 호출했을 때
메로리 상에 적재되는 일련의 과정을 따라야 하므로 오버헤드가 발생할 수 있다.
따라서 재귀 함수 대신에 반복문을 사용하여 오버헤드를 줄일 수 있다.
일반적으로 반복문을 이용한 다이나믹 프로그래밍이 더 성능이 좋다.
"""

# 탑다운(Top-Down) 방식 : 큰 문제를 해결하기 위해 작은 문제를 호출한다.
# 호출되는 함수 확인
d = [0] * 100

def pibo(x):
    print('f(' + str(x) + ')', end=' ')
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = pibo(x - 1) + pibo(x - 2)
    return  d[x]

pibo(6)

# 보텁엄(Bottom-Up) 방식 아래에서 위로 올라가는 방식 : 반복문을 활용해 구현

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 첫 번째 피보나치 수와 두 번째 피보나치 수는 1
d[1] = 1
d[2] = 1
n = 99

# 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)
for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])





